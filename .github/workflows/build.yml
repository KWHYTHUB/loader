name: Build Binaries

on:
  push:
    branches: [ main, addresser ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows"
          os: windows-latest
          extra_flags: '-G "Visual Studio 16 2019" -T host=x86 -A win32'
          gen_paths:  './build/gen/Address.hpp ./build/gen/Compare.hpp ./build/gen/Hedaer.hpp ./build/gen/Modify.hpp ./build/gen/Type.hpp ./build/gen/Wrap.hpp'
          out_paths: './build/Release/geode.dll ./build/Release/geode.lib ./build/src/inject/windows/Release/XInput9_1_0.dll ./build/src/CCZipUtils/Release/CCZipUtils.lib'
        - name: "macOS"
          os: macos-latest
          extra_flags: "-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          gen_paths:  './build/gen/Address.hpp ./build/gen/Compare.hpp ./build/gen/Hedaer.hpp ./build/gen/Modify.hpp ./build/gen/Type.hpp ./build/gen/Wrap.hpp'
          out_paths: './build/Geode.dylib ./build/src/CCZipUtils/libCCZipUtils.a'
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86
      if: matrix.config.os == 'windows-latest'
    
#    - name: Download clcache
#      run: |
#         curl -LJO https://github.com/frerich/clcache/releases/download/v4.2.0/clcache-4.2.0.zip
#         unzip ./clcache-4.2.0.zip -d ./clcache-bin
#         echo "./clcache-bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#         echo "CC=clcache" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
#         echo "CXX=clcache" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
#         echo "CLCACHE_DIR=${{ github.workspace }}/.clcache" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
#      if: matrix.config.os == 'windows-latest'
    
#    - name: Prepare clcache timestamp
#      id: timestamp
#      run: |
#        $DATE=Get-Date -UFormat "%Y-%m-%d-%H;%M;%S"
#        echo "::set-output name=timestamp::$DATE"
#      if: matrix.config.os == 'windows-latest'
    
#    - name: Configure clcache
#      uses: actions/cache@v2
#      with:
#        path: ${{ github.workspace }}/.clcache
#        key: ${{ matrix.config.os }}-${{ steps.timestamp.outputs.timestamp }}
#        restore-keys: ${{ matrix.config.os }}
#      if: matrix.config.os == 'windows-latest'
        
    - name: Configure ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ matrix.config.os }}
      if: matrix.config.os == 'macos-latest'
    
    - name: Configure CMake
      run: |
        cmake -B ${{ github.workspace }}/build ${{ matrix.config.extra_flags }} -DGEODE_DONT_BUILD_TEST_MODS=On -DGEODE_BUILD_UNIT_TESTS=On
          
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
          
    - name: Move to output folder
      shell: bash
      working-directory: ${{ github.workspace }}
      run: |
        mkdir ./out
        mkdir ./out/gen
        mv ${{ matrix.config.out_paths }} ./out
        mv ${{ matrix.config.gen_paths }} ./out/gen
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.name }} Loader Binary + Libraries
        path: ./out/
